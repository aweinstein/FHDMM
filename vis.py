import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib as mpl


def plot_actions(cue=0):
    mpl.rcParams['axes.labelsize'] = 'large'
    d_map = {3:1, 8:2, 14:3, 23:4}
    df = pd.read_pickle('data.pkl').reset_index()
    df = df.loc[df['cue'] == cue]
    g = sns.FacetGrid(df, col='subject',
                      col_wrap=6, size=1.5, ylim=(0, 5), aspect=1.5)

    g.map(plt.plot, 'action')
    g.set(xticks=[], yticks=[0,1,2,3], yticklabels=['3', '8', '14', '23'])
    g.set(ylim=(-0.5, 4))
    g.set_ylabels('choice')
    g.fig.tight_layout()
    g.fig.subplots_adjust(top=0.93)


    subjects = df['subject'].unique()
    for ax, subject in zip(g.axes, subjects):
        df_subject = df.loc[df['subject'] == subject]
        df_subject.reset_index(inplace=True)
        df_wins = df_subject.loc[df_subject['reward'] > 0]
        df_lose = df_subject.loc[df_subject['reward'] < 0]
        pos_win = df_wins.loc[df_wins['subject'] == subject].index
        pos_lose = df_lose.loc[df_lose['subject'] == subject].index
        ax.eventplot(pos_win, lineoffsets=3.5, linelength=0.75,
                     linewidths=0.4)
        ax.eventplot(pos_lose, lineoffsets=3.5, linelength=0.75,
                     color='r', linewidths=0.4)
    plt.tight_layout()
    plt.savefig('actions_0.pdf')
    plt.show()
    globals().update(locals())

def plot_simulation_run():
    plt.style.use('seaborn-white')
    mpl.rcParams['lines.linewidth'] = 2
    mpl.rcParams['xtick.labelsize'] = 'large'
    mpl.rcParams['ytick.labelsize'] = 'large'
    mpl.rcParams['axes.labelsize'] = 'large'

    df = pd.read_csv('softmax_experiment.csv')
    df_reward = df[df['context'] == 'reward'].reset_index()
    df_punishment = df[df['context'] == 'punishment'].reset_index()

    xmax = min(len(df_reward['action']), len(df_punishment['action'])) - 1
    f, (ax1, ax2) = plt.subplots(2, 1)
    ax1.plot(df_reward['action'])
    ax1.set_xlabel('trial')
    ax1.set_ylabel('action')
    ax1.set_yticks([3, 8, 14, 23])
    ax1.set_ylim(ymin=2, ymax=28)
    ax1.set_xlim(xmax=xmax)
    ax1.set_title('Win context')
    df_wins = df_reward.loc[df_reward['reward'] > 0]
    df_lose = df_reward.loc[df_reward['reward'] < 0]
    pos_win = df_wins.index
    pos_lose = df_lose.index
    ax1.eventplot(pos_win, lineoffsets=25.5, linelength=4,
                  linewidths=2)
    ax1.eventplot(pos_lose, lineoffsets=25.5, linelength=4,
                  color='r', linewidths=2)

    ax2.plot(df_punishment['action'])
    ax2.set_xlabel('trial')
    ax2.set_ylabel('action')
    ax2.set_yticks([3, 8, 14, 23])
    ax2.set_ylim(ymin=2, ymax=28)
    ax2.set_xlim(xmax=xmax)
    ax2.set_title('Lose context')
    df_wins = df_punishment.loc[df_punishment['reward'] > 0]
    df_lose = df_punishment.loc[df_punishment['reward'] < 0]
    pos_win = df_wins.index
    pos_lose = df_lose.index
    ax2.eventplot(pos_win, lineoffsets=25.5, linelength=4,
                  linewidths=2)
    ax2.eventplot(pos_lose, lineoffsets=25.5, linelength=4,
                  color='r', linewidths=2)

    plt.tight_layout()
    plt.savefig('softmax_experiment.pdf')
    plt.show()

def plot_fit_data():
    plt.style.use('seaborn-white')
    mpl.rcParams['lines.linewidth'] = 2
    mpl.rcParams['xtick.labelsize'] = 'large'
    mpl.rcParams['ytick.labelsize'] = 'large'
    mpl.rcParams['axes.labelsize'] = 'large'

    df = pd.read_pickle('model.pkl') # model.pkl generated by
                                     # ml.fit_behavioral_data()
    alpha, beta = df['alpha_0'], df['beta_0']
    errbar_th = 0.3

    xerr, yerr = df['se_alpha_0'].as_matrix(), df['se_beta_0'].as_matrix()
    err_mask = (xerr < errbar_th) & (yerr < errbar_th)
    alpha_poor = np.ma.masked_array(alpha, err_mask)
    beta_poor = np.ma.masked_array(beta, err_mask)
    alpha_good = np.ma.masked_array(alpha, ~err_mask)
    beta_good = np.ma.masked_array(beta, ~err_mask)
    xerr[~err_mask] = 0
    yerr[~err_mask] = 0

    plt.errorbar(alpha, beta, xerr=xerr, yerr=yerr, marker='^', ls='none', ms=0,
                 mfc='b', ecolor='b', alpha=0.2, label='')
    plt.scatter(alpha_good, beta_good, 100,  marker='^', label='win good fit')
    plt.scatter(alpha_poor, beta_poor, 100,  marker='v', label='win poor fit')


    xerr, yerr = df['se_alpha_1'].as_matrix(), df['se_beta_1'].as_matrix()
    alpha, beta = df['alpha_1'], df['beta_1']
    err_mask = (xerr < errbar_th) & (yerr < errbar_th)
    alpha_poor = np.ma.masked_array(alpha, err_mask)
    beta_poor = np.ma.masked_array(beta, err_mask)
    alpha_good = np.ma.masked_array(alpha, ~err_mask)
    beta_good = np.ma.masked_array(beta, ~err_mask)
    xerr[~err_mask] = 0
    yerr[~err_mask] = 0

    plt.errorbar(alpha, beta, xerr=xerr, yerr=yerr, marker='^', ls='none', ms=0,
                 mfc='r', ecolor='r', alpha=0.2, label='')
    plt.scatter(alpha_good, beta_good, 100, 'r', marker='<', label='lose good fit')
    plt.scatter(alpha_poor, beta_poor, 100, 'r', marker='>', label='lose poor fit')

    plt.legend()

    plt.xlim(-0.05, 1.05)
    plt.ylim(-0.05, 2.05)
    plt.xlabel(r'$\alpha_c$', fontsize=18)
    plt.ylabel(r'$\beta_c$', fontsize=18)
    plt.tight_layout()
    plt.savefig('experimental_fit.pdf')
    plt.show()
    globals().update(locals())

if __name__ == '__main__':
    plt.close('all')
    plot_actions()
